#---optimum soln O(n)
class Solution:
    def minSubArrayLen(self, s: int, nums: List[int]) -> int:
        n=len(nums)
        min_len=n+1
        windowStart=0
        windowSum=0
        for windowEnd in range(0,n):
            windowSum+=nums[windowEnd]
            while windowSum>=s:
                min_len=min(min_len, windowEnd-windowStart+1)
                windowSum-=nums[windowStart]
                windowStart+=1
                
        return 0 if min_len==n+1 else min_len
        
#---brute force O(n2)
class Solution:
    def minSubArrayLen(self, s: int, nums: List[int]) -> int:
        min_len=len(nums)+1
        if len(nums)==0:
            return 0
        
        for start in range(0,len(nums)):   
            sum=0
            for end in range(start,len(nums)):
                sum+=nums[end]
                if sum>=s:
                    min_len=min(min_len,end-start+1)
                    break
        return 0 if min_ctr==len(nums)+1 else min_ctr
        
#---brute force O(n3)
class Solution:
    def minSubArrayLen(self, s: int, nums: List[int]) -> int:
        min_ctr=sys.maxsize
        if len(nums)==0:
            return 0
        
        for i in range(0,len(nums)):    
            for j in range(i,len(nums)):
                ctr,sum=0,0
                for k in range(i,j+1):
                    sum=sum+nums[k]
                    ctr+=1
                    if sum>=s:
                        min_ctr=min(min_ctr,ctr)
        if min_ctr!=sys.maxsize:
            return min_ctr
        else:
            return 0
